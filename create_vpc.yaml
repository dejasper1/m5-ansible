---
  - hosts: localhost
    gather_facts: no
    module_defaults: 
      group/aws:
        region: "us-east-1"

    tasks:
      - name: Create VPC
        ec2_vpc_net:
          name: Module5
          cidr_block: 10.0.0.0/16
          tags:
            Name: "Module5"
        register: vpc
      - name: Create public subnet 1
        ec2_vpc_subnet:
          vpc_id: "{{ vpc.vpc.id }}"
          cidr: 10.0.1.0/24
          az: "us-east-1a"
          tags:
            Name: "Module5_public1"     
        register: public1_subnet
      - name: Create public subnet 2
        ec2_vpc_subnet:
          vpc_id: "{{ vpc.vpc.id }}"
          cidr: 10.0.2.0/24
          az: "us-east-1c"
          tags:
            Name: "Module5_public2"
        register: public2_subnet
      - name: Create private subnet 1
        ec2_vpc_subnet:
          vpc_id: "{{ vpc.vpc.id }}"
          cidr: 10.0.3.0/24
          az: "us-east-1a"
          tags:
            Name: "Module5_private1"
        register: private1_subnet
      - name: Create private subnet 2
        ec2_vpc_subnet:
          vpc_id: "{{ vpc.vpc.id }}"
          cidr: 10.0.4.0/24
          az: "us-east-1c" 
          tags:
            Name: "Module5"
        register: private2_subnet
      - name: Create internet gateway
        ec2_vpc_igw:
          vpc_id: "{{ vpc.vpc.id }}"
          tags:
            Name: "Module5_private2"
        register: igw
      - name: Create security group - load balancing
        ec2_group:
          name: Module5-nginx-servers-sg
          description: nginx servers - load balance
          vpc_id: "{{ vpc.vpc.id }}"
          rules:
            - proto: tcp
              ports:
                - 22
                - 80
              cidr_ip: 0.0.0.0/0
              rule_desc: allow traffic to ports 22 and 80
          tags:
            Name: "Module5"
        register: secgroup_nginx
      - name: Create security group - default
        ec2_group:
          name: Module5-default
          description: Module 5 default security group
          vpc_id: "{{ vpc.vpc.id }}"
          rules:
            - proto: tcp
              from_port: 0
              to_port: 65535
              group_name: Module5-default
              rule_desc: all 
          tags:
            Name: "Module5"
        register: secgroup_default
      - name: Create security group - postgres
        ec2_group:
          name: Module5-postgres
          description: Allow connections to postgres
          vpc_id: "{{ vpc.vpc.id }}"
          rules:
            - proto: tcp
              ports:
                - 8080
                - 5432
              group_name: Module5-nginx-servers-sg
              rule_desc: Allow connections to user service
          tags:
            Name: "Module5"
        register: secgroup_ig_postgres
      - name: "Create and associate public network ACL"
        ec2_vpc_nacl:
          vpc_id: "{{ vpc.vpc.id }}"
          name: Module5-public-acl
          subnets: ["{{ public1_subnet.subnet.id}}", "{{ public2_subnet.subnet.id}}"]         
          ingress:
              # Rules from previous module
              # Inbound traffic
              # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
              #                                             port from, port to
              - [100, 'all', 'allow', '10.0.0.0/16', null, null, 0, 65535]
              - [110, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
              - [120, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80 ]
              - [130, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
              - [200, 'tcp', 'allow', '73.193.99.86/32', null, null, 5000, 5000]
              - [210, 'tcp', 'allow', '24.196.25.139/32', null, null, 5000, 5000]
              - [220, 'tcp', 'allow', '24.239.105.213/32', null, null, 5000, 5000]
          egress:
              # Outbound traffic
              # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
              #                                        port from, port to
              - [100, 'all', 'allow', '10.0.0.0/16', null, null, 0, 65535]
              - [110, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
              - [120, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
              - [130, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
              - [200, 'tcp', 'allow', '73.193.99.86/32', null, null, 5000, 5000]
              - [210, 'tcp', 'allow', '24.196.25.139/32', null, null, 5000, 5000]
              - [220, 'tcp', 'allow', '24.239.105.213/32', null, null, 5000, 5000]
          tags:
            Name: "Module5"
      - name: "Create and associate private network ACL"
        ec2_vpc_nacl:
          vpc_id: "{{ vpc.vpc.id }}"
          name: Module5-private-acl
          subnets: ["{{ private1_subnet.subnet.id}}", "{{ private2_subnet.subnet.id}}"]
              # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
              #                                        port from, port to
          ingress:
              - [100, 'all', 'allow', '10.0.0.0/16', null, null, 0, 65535]
              - [200, 'tcp', 'allow', '10.0.0.0/16', null, null, 5432, 5432]
              - [300, 'tcp', 'allow', '10.0.0.0/16', null, null, 22, 22 ]

          egress:
              # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
              #                                        port from, port to
              - [100, 'all', 'allow', '10.0.0.0/16', null, null, 0, 65535]
              - [200, 'tcp', 'allow', '10.0.0.0/16', null, null, 1024, 65535]
          tags:
            Name: "Module5"
      - name: "Create NAT gateway"
        ec2_vpc_nat_gateway:
          subnet_id: "{{ public1_subnet.subnet.id}}"
          if_exist_do_not_create: yes
        register: nat        
      - name: Create public route table 1
        ec2_vpc_route_table:
          vpc_id: "{{ vpc.vpc.id }}"
          subnets:
            - "{{ public1_subnet.subnet.id}}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ igw.gateway_id }}"
          tags:
            Name: "Module5-public1-routetable"
      - name: Create public route table 2
        ec2_vpc_route_table:
          vpc_id: "{{ vpc.vpc.id }}"
          subnets:
            - "{{ public2_subnet.subnet.id}}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ igw.gateway_id }}"
          tags:
            Name: "Module5-public2-routetable"
      - name: Create private route table 1
        ec2_vpc_route_table:
          vpc_id: "{{ vpc.vpc.id }}"
          subnets:
            - "{{ private1_subnet.subnet.id}}"
          routes:
            - dest: 0.0.0.0/0
              nat_gateway_id: "{{ nat.nat_gateway_id }}"
          tags:
            Name: "Module5-private1-routetable"
      - name: Create private route table 2
        ec2_vpc_route_table:
          vpc_id: "{{ vpc.vpc.id }}"
          subnets:
            - "{{ private2_subnet.subnet.id}}"
          routes:
            - dest: 0.0.0.0/0
              nat_gateway_id: "{{ nat.nat_gateway_id }}"
          tags:
            Name: "Module5-private2-routetable"

